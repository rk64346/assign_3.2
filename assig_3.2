{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d37c2708-fb5c-445d-9a9f-c650d17c494a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"Q1 -  create a python program to sort the given list of tuple based on integer value using a lamda function.\\n[('sachine tendulkar',34357),('ricky ponting', 27483),('jack kallis',25534),('virat kohli',24936)]\""
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"Q1 -  create a python program to sort the given list of tuple based on integer value using a lamda function.\n",
    "[('sachine tendulkar',34357),('ricky ponting', 27483),('jack kallis',25534),('virat kohli',24936)]\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e6606547-ee81-474e-9b9b-e6d63ff0af7c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('virat kohli', 24936), ('jack kallis', 25534), ('ricky ponting', 27483), ('sachine tendulkar', 34357)]\n"
     ]
    }
   ],
   "source": [
    "list1 = [('sachine tendulkar',34357),('ricky ponting', 27483),('jack kallis',25534),('virat kohli',24936)]\n",
    "sort_list = sorted(list1, key = lambda x:x[1])\n",
    "print(sort_list)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c18455d-af46-45a6-996b-518097d4bd06",
   "metadata": {},
   "source": [
    "\"\"\"Q2 - write a python program to find the square of all the number in the given list of integer using lamda and map function\n",
    "[1,2,3,4,5,6,7,8,9,10]\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "34131d95-ad20-4235-9a73-46f4389cae5a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n"
     ]
    }
   ],
   "source": [
    "list2 =  [1,2,3,4,5,6,7,8,9,10]\n",
    "square_number = list(map(lambda x:x**2,list2))\n",
    "print(square_number)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "743d7b55-056b-46b1-a919-82c9d6317be6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"Q3 write apython program to  convert the list of intereg into a tuple of string . use map and lamda functions\\ngiven string:[1,2,3,4,5,6,7,8,9,10]\\nexpexted output:('1','2','3','4','5','6','7','8','9','10')\""
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"Q3 write apython program to  convert the list of intereg into a tuple of string . use map and lamda functions\n",
    "given string:[1,2,3,4,5,6,7,8,9,10]\n",
    "expexted output:('1','2','3','4','5','6','7','8','9','10')\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "644c0e91-6db0-43dc-9281-9f61811c1947",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n"
     ]
    }
   ],
   "source": [
    "integer_list = [1,2,3,4,5,6,7,8,9,10]\n",
    "integer_tuple =  list(map(lambda x: str(x,), integer_list))\n",
    "print(integer_tuple)\n",
    "                            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6268e9e9-7006-4893-877d-dcb4703a8e83",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Q4 - WRITE A PYTHON PROGRAM USING REDUSE FUNCTION TO COMPUTE THE PRODUCT  OF LIST CONTANING NUMBERS FROM 1 TO 25.'"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"Q4 - WRITE A PYTHON PROGRAM USING REDUSE FUNCTION TO COMPUTE THE PRODUCT  OF LIST CONTANING NUMBERS FROM 1 TO 25.\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a238c343-6a9e-478d-873c-74bc9a075483",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "26\n"
     ]
    }
   ],
   "source": [
    "from functools import reduce\n",
    "my_list = [1,25]\n",
    "result = reduce(lambda x,y:x+y,my_list)\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "28d74953-5a0c-4e3e-b88d-2b21551c80f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Q5 -  write a python program to filter the number in alist that are divisible by 2&3 using the filter function.'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"Q5 -  write a python program to filter the number in alist that are divisible by 2&3 using the filter function.\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8982b2da-27be-474c-9412-8f03ef49303c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[6]\n"
     ]
    }
   ],
   "source": [
    "my_list = [1,2,3,4,5,6,7,8,9]\n",
    "filtered_list = list(filter(lambda x:x % 2==0 and x % 3 ==0,my_list))\n",
    "print(filtered_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "33bc52e8-ff12-47dc-8f8d-3f14324f6048",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"write a python program to find palindromes in the given list of string using lamda and filter function.\\n['python','php,'aba','radar','level']\""
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"write a python program to find palindromes in the given list of string using lamda and filter function.\n",
    "['python','php,'aba','radar','level']\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b99be2b5-e92d-415c-805a-3ca321693ae7",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "unterminated string literal (detected at line 1) (1084714036.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[13], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    names = ['python','php,'aba','radar','level']\u001b[0m\n\u001b[0m                                               ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m unterminated string literal (detected at line 1)\n"
     ]
    }
   ],
   "source": [
    "names = ['python','php,'aba','radar','level']\n",
    "is_palindromes = lambda word: word == word[::-1]\n",
    "palindromes = list(filter(is_palindromes,names))\n",
    " print(palindromes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f769013f-e8ba-4a65-838f-a2ad65daa7b0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
